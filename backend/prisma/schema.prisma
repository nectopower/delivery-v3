// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum UserRole {
  ADMIN
  RESTAURANT
  CUSTOMER
  DELIVERY_PERSON
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  DELIVERING
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  CASH
}

enum DeliveryPersonStatus {
  AVAILABLE
  BUSY
  OFFLINE
}

enum VehicleType {
  BICYCLE
  MOTORCYCLE
  CAR
  VAN
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  admin          Admin?
  restaurant     Restaurant?
  customer       Customer?
  deliveryPerson DeliveryPerson?
  notifications  Notification[]
}

model Admin {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Restaurant {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  address     String
  phone       String
  description String?
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  dishes      Dish[]
  orders      Order[]
  categories  Category[]
}

model Customer {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  address   String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]
}

model DeliveryPerson {
  id                String             @id @default(uuid())
  userId            String             @unique
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  cpf               String             @unique
  phone             String
  vehicleType       VehicleType
  vehiclePlate      String?
  status            DeliveryPersonStatus @default(OFFLINE)
  currentLatitude   Float?
  currentLongitude  Float?
  rating            Float              @default(0)
  totalDeliveries   Int                @default(0)
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  deliveries        Delivery[]
}

model Category {
  id           String     @id @default(uuid())
  name         String
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  dishes       Dish[]
}

model Dish {
  id           String     @id @default(uuid())
  name         String
  description  String?
  price        Float
  imageUrl     String?
  isAvailable  Boolean    @default(true)
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  categoryId   String?
  category     Category?  @relation(fields: [categoryId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  orderItems   OrderItem[]
}

model Order {
  id           String      @id @default(uuid())
  status       OrderStatus @default(PENDING)
  total        Float
  customerId   String
  customer     Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  restaurantId String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  address      String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  items        OrderItem[]
  payment      Payment?
  delivery     Delivery?
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  price     Float
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  dishId    String
  dish      Dish     @relation(fields: [dishId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id            String        @id @default(uuid())
  amount        Float
  status        PaymentStatus @default(PENDING)
  method        PaymentMethod
  transactionId String?
  orderId       String        @unique
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Delivery {
  id                String      @id @default(uuid())
  orderId           String      @unique
  order             Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  deliveryPersonId  String?
  deliveryPerson    DeliveryPerson? @relation(fields: [deliveryPersonId], references: [id])
  status            OrderStatus @default(PENDING)
  fee               Float
  distance          Float
  estimatedTime     Int         // em minutos
  startTime         DateTime?
  endTime           DateTime?
  customerRating    Int?
  customerFeedback  String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model DeliveryFeeConfig {
  id                String   @id @default(uuid())
  basePrice         Float
  pricePerKm        Float
  rushHourMultiplier Float   @default(1.5)
  rushHourStart     Int      // hora do dia (0-23)
  rushHourEnd       Int      // hora do dia (0-23)
  nightFeeMultiplier Float   @default(1.2)
  nightFeeStart     Int      // hora do dia (0-23)
  nightFeeEnd       Int      // hora do dia (0-23)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Notification {
  id          String   @id @default(uuid())
  type        String
  message     String
  recipientId String
  recipient   User     @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  read        Boolean  @default(false)
  data        Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
